{
  "name": "Database agent",
  "nodes": [
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Get table definition to find all columns and types",
        "operation": "executeQuery",
        "query": "select\n  c.column_name,\n  c.data_type,\n  c.is_nullable,\n  c.column_default,\n  tc.constraint_type,\n  ccu.table_name AS referenced_table,\n  ccu.column_name AS referenced_column\nfrom\n  information_schema.columns c\nLEFT join\n  information_schema.key_column_usage kcu\n  ON c.table_name = kcu.table_name\n  AND c.column_name = kcu.column_name\nLEFT join\n  information_schema.table_constraints tc\n  ON kcu.constraint_name = tc.constraint_name\n  AND tc.constraint_type = 'FOREIGN KEY'\nLEFT join\n  information_schema.constraint_column_usage ccu\n  ON tc.constraint_name = ccu.constraint_name\nwhere\n  c.table_name = '{{ $fromAI(\"table_name\") }}'\n  AND c.table_schema = '{{ $fromAI(\"schema_name\") }}'\norder by\n  c.ordinal_position",
        "options": {}
      },
      "id": "97007c3d-c4e3-4c33-883a-1bc186b71470",
      "name": "Get Table Definition",
      "type": "n8n-nodes-base.postgresTool",
      "position": [
        560,
        -160
      ],
      "typeVersion": 2.5,
      "credentials": {
        "postgres": {
          "id": "6RDDmvGLD9UXkjzp",
          "name": "Regular data"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Get all the data from Postgres, make sure you append the tables with correct schema. Every table is associated with some schema in the database.",
        "operation": "executeQuery",
        "query": "{{ $fromAI(\"sql_query\", \"SQL Query\") }}",
        "options": {}
      },
      "id": "0cacc4c5-94bd-4d9a-be9e-32b60fe53cca",
      "name": "Execute SQL Query",
      "type": "n8n-nodes-base.postgresTool",
      "position": [
        220,
        -160
      ],
      "typeVersion": 2.5,
      "credentials": {
        "postgres": {
          "id": "6RDDmvGLD9UXkjzp",
          "name": "Regular data"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Get list of all tables with their schema in the database",
        "operation": "executeQuery",
        "query": "SELECT \n    table_schema,\n    table_name\nFROM information_schema.tables\nWHERE table_type = 'BASE TABLE'\n    AND table_schema NOT IN ('pg_catalog', 'information_schema')\nORDER BY table_schema, table_name;",
        "options": {}
      },
      "id": "48f722a7-f32b-4ab7-916b-e6849100d4ab",
      "name": "Get DB Schema and Tables List",
      "type": "n8n-nodes-base.postgresTool",
      "position": [
        380,
        -160
      ],
      "typeVersion": 2.5,
      "credentials": {
        "postgres": {
          "id": "6RDDmvGLD9UXkjzp",
          "name": "Regular data"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.query }}",
        "options": {
          "systemMessage": "You are a database assistant. Your job is to help users analyze and interact with structured data stored in a Postgres database.\n\nYOU MUST ADHERE TO THE MAIN WORKFLOW DESCRIBED BELOW\n\n## MAIN WORKFLOW\n\n- Always begin by calling `Get DB Schema and Tables List` to retrieve the list of tables and their schema names. Do this before running any SQL queries or making assumptions about table structures.\n- After retrieving the list, use the correct schema-qualified table names in all SQL queries.\n- Use `Get Table Definition` to inspect table structure (columns and types) before running queries that depend on specific fields.\n- Respond to user questions by generating and ALWAYS RUNNING **optimized SQL queries** to fetch or aggregate only the data needed for the answer.\n- ALWAYS RUN THE QUERY YOU GENERATE, don't just display it to the user\n- Do not load entire tables into memory. Use targeted SELECT, GROUP BY, ORDER BY, and LIMIT clauses.\n- When constructing SQL queries, use ILIKE instead of = for string matching.\n- Make sure to always return the actual numerical values with the queries you construct.\nIf the input question is more broad, return a list with the relevant results in your answer.\n\n## Tools\n\n- `Execute SQL Query` — Use this to run the SQL queries you generate.\n- `Get DB Schema and Tables List` — Call this first to retrieve available tables and schema names.\n- `Get Table Definition` — Use this to look up column names, types, and other structure info before querying unfamiliar tables.\n\n## Output Formatting\n\n- Always include the actual numeric result retrieved from the database, not just the label or identifier.\n- Be concise and accurate. Do not guess — query instead.\n- If additional scientific context is needed, you may call the Abstract_tool to enhance the response with relevant literature summaries.\n\n## Table descriptions\n'kegg_annotations' - contains information about genes, their product and their respective taxon and strain\n",
          "maxIterations": 10
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        160,
        -400
      ],
      "id": "3e028c2c-6754-4e5c-85f5-34ca1539045b",
      "name": "Database Agent"
    },
    {
      "parameters": {
        "model": "codestral-latest",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatMistralCloud",
      "typeVersion": 1,
      "position": [
        80,
        -180
      ],
      "id": "ac706e4d-7a37-497c-bac0-9f10415c876e",
      "name": "Mistral Cloud Chat Model",
      "credentials": {
        "mistralCloudApi": {
          "id": "xr1pdNAPj6ZlLp0h",
          "name": "Mistral Cloud account"
        }
      }
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -40,
        -400
      ],
      "id": "90dc4722-161f-4daa-b672-6d52efaeea54",
      "name": "When Executed by Another Workflow"
    }
  ],
  "pinData": {
    "When Executed by Another Workflow": [
      {
        "json": {
          "query": "Which strains have genes that produce Elongation factor 4?"
        }
      }
    ]
  },
  "connections": {
    "Mistral Cloud Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Database Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Execute SQL Query": {
      "ai_tool": [
        [
          {
            "node": "Database Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get DB Schema and Tables List": {
      "ai_tool": [
        [
          {
            "node": "Database Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Table Definition": {
      "ai_tool": [
        [
          {
            "node": "Database Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Database Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "7d5c7ed2-02f6-4099-a565-cbc415623558",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "fd3d3cdc6721a528a22cb747103d5caa827f5ce976b750bc0ea157931f2049c4"
  },
  "id": "F0ky3VC85HeBsrq6",
  "tags": []
}